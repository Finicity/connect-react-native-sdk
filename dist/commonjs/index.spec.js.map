{"version":3,"sources":["index.spec.tsx"],"names":["describe","eventHandlerFns","onCancel","event","console","log","onDone","onError","onLoad","onRoute","onUser","test","instanceOf","renderer","create","getInstance","mockFn","jest","fn","state","eventHandlers","close","expect","toHaveBeenCalledTimes","toHaveBeenLastCalledWith","code","reason","mockEvent","Platform","OS","testRenderer","startPingingConnectMockFn","closeMockFn","handleEventMockFn","startPingingConnect","handleEvent","modal","root","findByType","webview","props","presentationStyle","toBe","toHaveBeenCalled","onMessage","toHaveBeenCalledWith","onRequestClose","webViewRef","postMessage","JSON","stringify","spyOn","and","callThrough","not","toThrow","pingConnect","type","ConnectEvents","PING","sdkVersion","CONNECT_SDK_VERSION","platform","SDK_PLATFORM","mockFn2","stopPingingConnect","useFakeTimers","setInterval","any","Function","PING_TIMEOUT","advanceTimersByTime","pingingConnect","toEqual","pingIntervalId","intervalId","clearInterval","postMessageMockFn","InAppBrowser","mockReturnValue","Promise","resolve","spyOpenAuth","mockImplementation","spyCloseAuth","openBrowser","connectUrl","urlRedirectStr","nativeEvent","data","URL","url","CLOSE_POPUP","browserDisplayed","dismissBrowser","ACK","mockStopPingFn","mockLoadedEventFn","evHandlers","toBeDefined","launch","undefined","linkingUri","bind","CANCEL","DONE","ERROR","ROUTE","params","screen","USER","action","customerId","experience","partnerId","sessionId","timestamp","ttl"],"mappings":"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","sourcesContent":["import React from 'react';\nimport renderer from 'react-test-renderer';\nimport { ConnectEventHandlers, FinicityConnect } from './index';\nimport InAppBrowser from 'react-native-inappbrowser-reborn';\nimport {\n  ConnectEvents,\n  CONNECT_SDK_VERSION,\n  SDK_PLATFORM,\n  PING_TIMEOUT,\n} from './constants';\nimport { WebViewMessageEvent } from 'react-native-webview';\nimport { Platform } from 'react-native';\n\ndescribe('FinicityConnect', () => {\n  const eventHandlerFns: ConnectEventHandlers = {\n    onCancel: (event: any) => {\n      console.log('cancel event received', event);\n    },\n    onDone: (event: any) => {\n      console.log('done event received', event);\n    },\n    onError: (event: any) => {\n      console.log('error event received', event);\n    },\n    onLoad: () => {\n      console.log('loaded event received', event);\n    },\n    onRoute: (event: any) => {\n      console.log('route event received', event);\n    },\n    onUser: (event: any) => {\n      console.log('user event received', event);\n    },\n  };\n\n  test('close', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    const mockFn = jest.fn();\n    instanceOf.state.eventHandlers.onCancel = mockFn;\n    instanceOf.close();\n    expect(mockFn).toHaveBeenCalledTimes(1);\n    expect(mockFn).toHaveBeenLastCalledWith({ code: 100, reason: 'exit' });\n  });\n\n  test('render', () => {\n    const mockEvent = { test: true };\n    // android\n    Platform.OS = 'android';\n    let testRenderer = renderer.create(\n      <FinicityConnect\n        connectUrl=\"https://finicity.com\"\n        eventHandlers={eventHandlerFns}\n        linkingUri=\"\"\n      />\n    );\n    let instanceOf: any = testRenderer.getInstance();\n\n    let startPingingConnectMockFn = jest.fn();\n    let closeMockFn = jest.fn();\n    let handleEventMockFn = jest.fn();\n    instanceOf.startPingingConnect = startPingingConnectMockFn;\n    instanceOf.close = closeMockFn;\n    instanceOf.handleEvent = handleEventMockFn;\n    let modal = testRenderer.root.findByType('Modal' as React.ElementType);\n    let webview = testRenderer.root.findByType(\n      'RNCWebView' as React.ElementType\n    );\n    webview.props.onLoad();\n    expect(modal.props.presentationStyle).toBe('fullScreen');\n    expect(startPingingConnectMockFn).toHaveBeenCalled();\n\n    webview.props.onMessage(mockEvent);\n    expect(handleEventMockFn).toHaveBeenCalledWith(mockEvent);\n\n    modal.props.onRequestClose();\n    expect(closeMockFn).toHaveBeenCalled();\n\n    // ios\n    Platform.OS = 'ios';\n    testRenderer = renderer.create(\n      <FinicityConnect\n        connectUrl=\"https://finicity.com\"\n        eventHandlers={eventHandlerFns}\n        linkingUri=\"\"\n      />\n    );\n\n    instanceOf = testRenderer.getInstance();\n\n    startPingingConnectMockFn = jest.fn();\n    closeMockFn = jest.fn();\n    handleEventMockFn = jest.fn();\n    instanceOf.startPingingConnect = startPingingConnectMockFn;\n    instanceOf.close = closeMockFn;\n    instanceOf.handleEvent = handleEventMockFn;\n    modal = testRenderer.root.findByType('Modal' as React.ElementType);\n    webview = testRenderer.root.findByType('RNCWebView' as React.ElementType);\n    webview.props.onLoad();\n    expect(modal.props.presentationStyle).toBe('pageSheet');\n    expect(startPingingConnectMockFn).toHaveBeenCalled();\n\n    webview.props.onMessage(mockEvent);\n    expect(handleEventMockFn).toHaveBeenCalledWith(mockEvent);\n\n    modal.props.onRequestClose();\n    expect(closeMockFn).toHaveBeenCalled();\n  });\n\n  test('postMessage', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    const mockFn = jest.fn();\n    instanceOf.webViewRef = { postMessage: mockFn } as any;\n    instanceOf.postMessage({ test: true });\n    expect(mockFn).toHaveBeenCalledWith(JSON.stringify({ test: true }));\n\n    // handle null webView\n    instanceOf.webViewRef = null;\n    spyOn(instanceOf, 'postMessage').and.callThrough();\n    expect(instanceOf.postMessage).not.toThrow();\n  });\n\n  test('pingConnect', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    // expect postMessage to be called to inform Connect of SDK\n    const mockFn = jest.fn();\n    instanceOf.postMessage = mockFn;\n    instanceOf.pingConnect();\n    expect(mockFn).toHaveBeenCalledTimes(1);\n    expect(mockFn).toHaveBeenLastCalledWith({\n      type: ConnectEvents.PING,\n      sdkVersion: CONNECT_SDK_VERSION,\n      platform: SDK_PLATFORM,\n    });\n    // expect to call stopPingingConnect if webViewRef = null\n    const mockFn2 = jest.fn();\n    instanceOf.stopPingingConnect = mockFn2;\n    instanceOf.webViewRef = null;\n    instanceOf.pingConnect();\n    expect(mockFn2).toHaveBeenCalledTimes(1);\n  });\n\n  test('startPingingConnect/stopPingingConnect', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    // expect to use set interval timer to post ping message to Connect\n    jest.useFakeTimers();\n    const mockFn = jest.fn();\n    instanceOf.pingConnect = mockFn;\n    instanceOf.startPingingConnect();\n    expect(setInterval).toHaveBeenCalledTimes(1);\n    expect(setInterval).toHaveBeenLastCalledWith(\n      expect.any(Function),\n      PING_TIMEOUT\n    );\n    jest.advanceTimersByTime(PING_TIMEOUT + 1);\n    expect(mockFn).toHaveBeenCalledTimes(1);\n    // Stop pinging Connect\n    expect(instanceOf.state.pingingConnect).toEqual(true);\n    expect(instanceOf.state.pingIntervalId).not.toEqual(0);\n    let intervalId = instanceOf.state.pingIntervalId;\n    instanceOf.stopPingingConnect();\n    expect(clearInterval).toHaveBeenCalledTimes(1);\n    expect(clearInterval).toHaveBeenCalledWith(intervalId);\n    expect(instanceOf.state.pingingConnect).toEqual(false);\n    expect(instanceOf.state.pingIntervalId).toEqual(0);\n  });\n\n  test('openBrowser/dismissBrowser', async () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    const postMessageMockFn = jest.fn();\n    instanceOf.postMessage = postMessageMockFn;\n    // Setup spies for InAppBrowser calls\n    jest\n      .spyOn(InAppBrowser, 'isAvailable')\n      .mockReturnValue(Promise.resolve(true));\n    const spyOpenAuth = jest\n      .spyOn(InAppBrowser, 'openAuth')\n      .mockImplementation(() => Promise.resolve({ type: 'cancel' }));\n    const spyCloseAuth = jest\n      .spyOn(InAppBrowser, 'closeAuth')\n      .mockImplementation(jest.fn());\n\n    // Open Browser, and from above mock cancel\n    await instanceOf.openBrowser(instanceOf.state.connectUrl);\n    expect(spyOpenAuth).toHaveBeenCalledTimes(1);\n    expect(spyCloseAuth).toHaveBeenCalledTimes(1);\n    expect(postMessageMockFn).toHaveBeenCalledTimes(1);\n  });\n\n  test('redirect Url', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    const urlRedirectStr = 'https://redirectUrl.com';\n    // create redirect event\n    const event = {\n      nativeEvent: {\n        data: '',\n      },\n    } as WebViewMessageEvent;\n    event.nativeEvent.data = JSON.stringify({\n      type: ConnectEvents.URL,\n      url: urlRedirectStr,\n    });\n    // mock openBrowser to catch call to openBrowser on redirect\n    const mockFn = jest.fn();\n    instanceOf.openBrowser = mockFn;\n    instanceOf.handleEvent(event);\n    expect(mockFn).toHaveBeenCalledTimes(1);\n    expect(mockFn).toHaveBeenLastCalledWith(urlRedirectStr);\n  });\n\n  test('close popup', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    // create close popup event\n    const event = {\n      nativeEvent: {\n        data: '',\n      },\n    } as WebViewMessageEvent;\n    event.nativeEvent.data = JSON.stringify({\n      type: ConnectEvents.CLOSE_POPUP,\n    });\n    // mock dismiss browser to catch call to dismissBrowser, set state to browser displayed.\n    const mockFn = jest.fn();\n    instanceOf.state.browserDisplayed = true;\n    instanceOf.dismissBrowser = mockFn;\n    instanceOf.handleEvent(event);\n    expect(mockFn).toHaveBeenCalledTimes(1);\n  });\n\n  test('ack', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    // create ack event\n    const event = {\n      nativeEvent: {\n        data: '',\n      },\n    } as WebViewMessageEvent;\n    event.nativeEvent.data = JSON.stringify({\n      type: ConnectEvents.ACK,\n    });\n    // mock stopPingingConnect, and eventHandler loaded to catch calls to these functions\n    const mockStopPingFn = jest.fn();\n    instanceOf.stopPingingConnect = mockStopPingFn;\n    const mockLoadedEventFn = jest.fn();\n    instanceOf.state.eventHandlers.onLoad = mockLoadedEventFn;\n    instanceOf.handleEvent(event);\n    expect(mockStopPingFn).toHaveBeenCalledTimes(1);\n    expect(mockLoadedEventFn).toHaveBeenCalledTimes(1);\n  });\n\n  test('launch', () => {\n    const evHandlers = { ...eventHandlerFns };\n    delete evHandlers.onLoad;\n    delete evHandlers.onRoute;\n    delete evHandlers.onUser;\n\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={evHandlers}\n          linkingUri=\"testApp\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n\n    expect(instanceOf.state.connectUrl).toBe('https://finicity.com');\n    expect(instanceOf.state.eventHandlers.onLoad).toBeDefined();\n    expect(instanceOf.state.eventHandlers.onRoute).toBeDefined();\n    expect(instanceOf.state.eventHandlers.onUser).toBeDefined();\n\n    // check for empty linkingUri\n    instanceOf.launch('https://finicity.com', evHandlers, undefined);\n    expect(instanceOf.state.linkingUri).toEqual('');\n  });\n\n  test('parseEventData', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n\n    // invalid JSON event\n    const event: any = {\n      nativeEvent: {\n        data: '{0}',\n      },\n    };\n\n    spyOn(instanceOf, 'handleEvent').and.callThrough();\n    expect(instanceOf.handleEvent.bind(instanceOf, event)).not.toThrow();\n\n    // valid event\n    event.nativeEvent.data = {\n      type: ConnectEvents.CANCEL,\n      data: {\n        code: 100,\n        reason: 'exit',\n      },\n    };\n\n    const mockFn = jest.fn();\n    instanceOf.state.eventHandlers.onCancel = mockFn;\n    instanceOf.handleEvent(event);\n    expect(mockFn).toHaveBeenLastCalledWith({\n      code: 100,\n      reason: 'exit',\n    });\n\n    // valid JSON event\n    event.nativeEvent.data = JSON.stringify({\n      type: ConnectEvents.CANCEL,\n      data: {\n        code: 100,\n        reason: 'exit',\n      },\n    });\n\n    instanceOf.handleEvent(event);\n    expect(mockFn).toHaveBeenLastCalledWith({\n      code: 100,\n      reason: 'exit',\n    });\n  });\n\n  test('cancel Event', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    // create cancel event\n    const event = {\n      nativeEvent: {\n        data: '',\n      },\n    } as WebViewMessageEvent;\n    event.nativeEvent.data = JSON.stringify({\n      type: ConnectEvents.CANCEL,\n      data: {\n        code: 100,\n        reason: 'exit',\n      },\n    });\n    // mock cancel event callback\n    const mockFn = jest.fn();\n    instanceOf.state.eventHandlers.onCancel = mockFn;\n    instanceOf.handleEvent(event);\n    expect(mockFn).toHaveBeenCalledTimes(1);\n    expect(mockFn).toHaveBeenLastCalledWith({\n      code: 100,\n      reason: 'exit',\n    });\n  });\n\n  test('done Event', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    // create done event\n    const event = {\n      nativeEvent: {\n        data: '',\n      },\n    } as WebViewMessageEvent;\n    event.nativeEvent.data = JSON.stringify({\n      type: ConnectEvents.DONE,\n      data: {\n        code: 200,\n        reason: 'complete',\n      },\n    });\n    // mock done event callback\n    const mockFn = jest.fn();\n    instanceOf.state.eventHandlers.onDone = mockFn;\n    instanceOf.handleEvent(event);\n    expect(mockFn).toHaveBeenCalledTimes(1);\n    expect(mockFn).toHaveBeenLastCalledWith({\n      code: 200,\n      reason: 'complete',\n    });\n  });\n\n  test('error Event', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    // create error event\n    const event = {\n      nativeEvent: {\n        data: '',\n      },\n    } as WebViewMessageEvent;\n    event.nativeEvent.data = JSON.stringify({\n      type: ConnectEvents.ERROR,\n      data: {\n        code: 500,\n        reason: 'error',\n      },\n    });\n    // mock error event callback\n    const mockFn = jest.fn();\n    instanceOf.state.eventHandlers.onError = mockFn;\n    instanceOf.handleEvent(event);\n    expect(mockFn).toHaveBeenCalledTimes(1);\n    expect(mockFn).toHaveBeenLastCalledWith({\n      code: 500,\n      reason: 'error',\n    });\n  });\n\n  test('route Event', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    // create route event\n    const event = {\n      nativeEvent: {\n        data: '',\n      },\n    } as WebViewMessageEvent;\n    event.nativeEvent.data = JSON.stringify({\n      type: ConnectEvents.ROUTE,\n      data: {\n        params: {},\n        screen: 'search',\n      },\n    });\n    // mock route event callback\n    const mockFn = jest.fn();\n    instanceOf.state.eventHandlers.onRoute = mockFn;\n    instanceOf.handleEvent(event);\n    expect(mockFn).toHaveBeenCalledTimes(1);\n    expect(mockFn).toHaveBeenLastCalledWith({\n      params: {},\n      screen: 'search',\n    });\n  });\n\n  test('user Event', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    // create user event\n    const event = {\n      nativeEvent: {\n        data: '',\n      },\n    } as WebViewMessageEvent;\n    event.nativeEvent.data = JSON.stringify({\n      type: ConnectEvents.USER,\n      data: {\n        action: 'Initialize',\n        customerId: '5003205004',\n        experience: null,\n        partnerId: '2445582695152',\n        sessionId:\n          'c004a06ffc4cccd485df796fba74f1a4b647ab4fee3e691b227db2d6b2c5d9e3',\n        timestamp: '1617009241542',\n        ttl: '1617016441542',\n        type: 'default',\n      },\n    });\n    // mock user event callback\n    const mockFn = jest.fn();\n    instanceOf.state.eventHandlers.onUser = mockFn;\n    instanceOf.handleEvent(event);\n    expect(mockFn).toHaveBeenCalledTimes(1);\n    expect(mockFn).toHaveBeenLastCalledWith({\n      action: 'Initialize',\n      customerId: '5003205004',\n      experience: null,\n      partnerId: '2445582695152',\n      sessionId:\n        'c004a06ffc4cccd485df796fba74f1a4b647ab4fee3e691b227db2d6b2c5d9e3',\n      timestamp: '1617009241542',\n      ttl: '1617016441542',\n      type: 'default',\n    });\n  });\n});\n"]}