{"version":3,"sources":["index.spec.tsx"],"names":["React","renderer","FinicityConnect","InAppBrowser","ConnectEvents","CONNECT_SDK_VERSION","SDK_PLATFORM","PING_TIMEOUT","Platform","describe","eventHandlerFns","onCancel","event","console","log","onDone","onError","onLoad","onRoute","onUser","test","instanceOf","create","getInstance","mockFn","jest","fn","state","eventHandlers","close","expect","toHaveBeenCalledTimes","toHaveBeenLastCalledWith","code","reason","mockEvent","OS","testRenderer","startPingingConnectMockFn","closeMockFn","handleEventMockFn","startPingingConnect","handleEvent","modal","root","findByType","webview","props","presentationStyle","toBe","toHaveBeenCalled","onMessage","toHaveBeenCalledWith","onRequestClose","webViewRef","postMessage","JSON","stringify","spyOn","and","callThrough","not","toThrow","pingConnect","type","PING","sdkVersion","platform","mockFn2","stopPingingConnect","useFakeTimers","setInterval","any","Function","advanceTimersByTime","pingingConnect","toEqual","pingIntervalId","intervalId","clearInterval","postMessageMockFn","mockReturnValue","Promise","resolve","spyOpenAuth","mockImplementation","spyCloseAuth","openBrowser","connectUrl","urlRedirectStr","nativeEvent","data","URL","url","CLOSE_POPUP","browserDisplayed","dismissBrowser","ACK","mockStopPingFn","mockLoadedEventFn","evHandlers","toBeDefined","launch","undefined","linkingUri","bind","CANCEL","DONE","ERROR","ROUTE","params","screen","USER","action","customerId","experience","partnerId","sessionId","timestamp","ttl"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,SAA+BC,eAA/B,QAAsD,SAAtD;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,SACEC,aADF,EAEEC,mBAFF,EAGEC,YAHF,EAIEC,YAJF,QAKO,aALP;AAOA,SAASC,QAAT,QAAyB,cAAzB;AAEAC,QAAQ,CAAC,iBAAD,EAAoB,MAAM;AAChC,QAAMC,eAAqC,GAAG;AAC5CC,IAAAA,QAAQ,EAAGC,KAAD,IAAgB;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,KAArC;AACD,KAH2C;AAI5CG,IAAAA,MAAM,EAAGH,KAAD,IAAgB;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAnC;AACD,KAN2C;AAO5CI,IAAAA,OAAO,EAAGJ,KAAD,IAAgB;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,KAApC;AACD,KAT2C;AAU5CK,IAAAA,MAAM,EAAE,MAAM;AACZJ,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,KAArC;AACD,KAZ2C;AAa5CM,IAAAA,OAAO,EAAGN,KAAD,IAAgB;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,KAApC;AACD,KAf2C;AAgB5CO,IAAAA,MAAM,EAAGP,KAAD,IAAgB;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAnC;AACD;AAlB2C,GAA9C;AAqBAQ,EAAAA,IAAI,CAAC,OAAD,EAAU,MAAM;AAClB,UAAMC,UAAU,GAAIpB,QAAQ,CACzBqB,MADiB,eAEhB,oBAAC,eAAD;AACE,MAAA,UAAU,EAAC,sBADb;AAEE,MAAA,aAAa,EAAEZ,eAFjB;AAGE,MAAA,UAAU,EAAC;AAHb,MAFgB,EAQjBa,WARiB,EAApB;AASA,UAAMC,MAAM,GAAGC,IAAI,CAACC,EAAL,EAAf;AACAL,IAAAA,UAAU,CAACM,KAAX,CAAiBC,aAAjB,CAA+BjB,QAA/B,GAA0Ca,MAA1C;AACAH,IAAAA,UAAU,CAACQ,KAAX;AACAC,IAAAA,MAAM,CAACN,MAAD,CAAN,CAAeO,qBAAf,CAAqC,CAArC;AACAD,IAAAA,MAAM,CAACN,MAAD,CAAN,CAAeQ,wBAAf,CAAwC;AAAEC,MAAAA,IAAI,EAAE,GAAR;AAAaC,MAAAA,MAAM,EAAE;AAArB,KAAxC;AACD,GAfG,CAAJ;AAiBAd,EAAAA,IAAI,CAAC,QAAD,EAAW,MAAM;AACnB,UAAMe,SAAS,GAAG;AAAEf,MAAAA,IAAI,EAAE;AAAR,KAAlB,CADmB,CAEnB;;AACAZ,IAAAA,QAAQ,CAAC4B,EAAT,GAAc,SAAd;AACA,QAAIC,YAAY,GAAGpC,QAAQ,CAACqB,MAAT,eACjB,oBAAC,eAAD;AACE,MAAA,UAAU,EAAC,sBADb;AAEE,MAAA,aAAa,EAAEZ,eAFjB;AAGE,MAAA,UAAU,EAAC;AAHb,MADiB,CAAnB;AAOA,QAAIW,UAAe,GAAGgB,YAAY,CAACd,WAAb,EAAtB;AAEA,QAAIe,yBAAyB,GAAGb,IAAI,CAACC,EAAL,EAAhC;AACA,QAAIa,WAAW,GAAGd,IAAI,CAACC,EAAL,EAAlB;AACA,QAAIc,iBAAiB,GAAGf,IAAI,CAACC,EAAL,EAAxB;AACAL,IAAAA,UAAU,CAACoB,mBAAX,GAAiCH,yBAAjC;AACAjB,IAAAA,UAAU,CAACQ,KAAX,GAAmBU,WAAnB;AACAlB,IAAAA,UAAU,CAACqB,WAAX,GAAyBF,iBAAzB;AACA,QAAIG,KAAK,GAAGN,YAAY,CAACO,IAAb,CAAkBC,UAAlB,CAA6B,OAA7B,CAAZ;AACA,QAAIC,OAAO,GAAGT,YAAY,CAACO,IAAb,CAAkBC,UAAlB,CACZ,YADY,CAAd;AAGAC,IAAAA,OAAO,CAACC,KAAR,CAAc9B,MAAd;AACAa,IAAAA,MAAM,CAACa,KAAK,CAACI,KAAN,CAAYC,iBAAb,CAAN,CAAsCC,IAAtC,CAA2C,YAA3C;AACAnB,IAAAA,MAAM,CAACQ,yBAAD,CAAN,CAAkCY,gBAAlC;AAEAJ,IAAAA,OAAO,CAACC,KAAR,CAAcI,SAAd,CAAwBhB,SAAxB;AACAL,IAAAA,MAAM,CAACU,iBAAD,CAAN,CAA0BY,oBAA1B,CAA+CjB,SAA/C;AAEAQ,IAAAA,KAAK,CAACI,KAAN,CAAYM,cAAZ;AACAvB,IAAAA,MAAM,CAACS,WAAD,CAAN,CAAoBW,gBAApB,GA/BmB,CAiCnB;;AACA1C,IAAAA,QAAQ,CAAC4B,EAAT,GAAc,KAAd;AACAC,IAAAA,YAAY,GAAGpC,QAAQ,CAACqB,MAAT,eACb,oBAAC,eAAD;AACE,MAAA,UAAU,EAAC,sBADb;AAEE,MAAA,aAAa,EAAEZ,eAFjB;AAGE,MAAA,UAAU,EAAC;AAHb,MADa,CAAf;AAQAW,IAAAA,UAAU,GAAGgB,YAAY,CAACd,WAAb,EAAb;AAEAe,IAAAA,yBAAyB,GAAGb,IAAI,CAACC,EAAL,EAA5B;AACAa,IAAAA,WAAW,GAAGd,IAAI,CAACC,EAAL,EAAd;AACAc,IAAAA,iBAAiB,GAAGf,IAAI,CAACC,EAAL,EAApB;AACAL,IAAAA,UAAU,CAACoB,mBAAX,GAAiCH,yBAAjC;AACAjB,IAAAA,UAAU,CAACQ,KAAX,GAAmBU,WAAnB;AACAlB,IAAAA,UAAU,CAACqB,WAAX,GAAyBF,iBAAzB;AACAG,IAAAA,KAAK,GAAGN,YAAY,CAACO,IAAb,CAAkBC,UAAlB,CAA6B,OAA7B,CAAR;AACAC,IAAAA,OAAO,GAAGT,YAAY,CAACO,IAAb,CAAkBC,UAAlB,CAA6B,YAA7B,CAAV;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAc9B,MAAd;AACAa,IAAAA,MAAM,CAACa,KAAK,CAACI,KAAN,CAAYC,iBAAb,CAAN,CAAsCC,IAAtC,CAA2C,WAA3C;AACAnB,IAAAA,MAAM,CAACQ,yBAAD,CAAN,CAAkCY,gBAAlC;AAEAJ,IAAAA,OAAO,CAACC,KAAR,CAAcI,SAAd,CAAwBhB,SAAxB;AACAL,IAAAA,MAAM,CAACU,iBAAD,CAAN,CAA0BY,oBAA1B,CAA+CjB,SAA/C;AAEAQ,IAAAA,KAAK,CAACI,KAAN,CAAYM,cAAZ;AACAvB,IAAAA,MAAM,CAACS,WAAD,CAAN,CAAoBW,gBAApB;AACD,GA9DG,CAAJ;AAgEA9B,EAAAA,IAAI,CAAC,aAAD,EAAgB,MAAM;AACxB,UAAMC,UAAU,GAAIpB,QAAQ,CACzBqB,MADiB,eAEhB,oBAAC,eAAD;AACE,MAAA,UAAU,EAAC,sBADb;AAEE,MAAA,aAAa,EAAEZ,eAFjB;AAGE,MAAA,UAAU,EAAC;AAHb,MAFgB,EAQjBa,WARiB,EAApB;AASA,UAAMC,MAAM,GAAGC,IAAI,CAACC,EAAL,EAAf;AACAL,IAAAA,UAAU,CAACiC,UAAX,GAAwB;AAAEC,MAAAA,WAAW,EAAE/B;AAAf,KAAxB;AACAH,IAAAA,UAAU,CAACkC,WAAX,CAAuB;AAAEnC,MAAAA,IAAI,EAAE;AAAR,KAAvB;AACAU,IAAAA,MAAM,CAACN,MAAD,CAAN,CAAe4B,oBAAf,CAAoCI,IAAI,CAACC,SAAL,CAAe;AAAErC,MAAAA,IAAI,EAAE;AAAR,KAAf,CAApC,EAbwB,CAexB;;AACAC,IAAAA,UAAU,CAACiC,UAAX,GAAwB,IAAxB;AACAI,IAAAA,KAAK,CAACrC,UAAD,EAAa,aAAb,CAAL,CAAiCsC,GAAjC,CAAqCC,WAArC;AACA9B,IAAAA,MAAM,CAACT,UAAU,CAACkC,WAAZ,CAAN,CAA+BM,GAA/B,CAAmCC,OAAnC;AACD,GAnBG,CAAJ;AAqBA1C,EAAAA,IAAI,CAAC,aAAD,EAAgB,MAAM;AACxB,UAAMC,UAAU,GAAIpB,QAAQ,CACzBqB,MADiB,eAEhB,oBAAC,eAAD;AACE,MAAA,UAAU,EAAC,sBADb;AAEE,MAAA,aAAa,EAAEZ,eAFjB;AAGE,MAAA,UAAU,EAAC;AAHb,MAFgB,EAQjBa,WARiB,EAApB,CADwB,CAUxB;;AACA,UAAMC,MAAM,GAAGC,IAAI,CAACC,EAAL,EAAf;AACAL,IAAAA,UAAU,CAACkC,WAAX,GAAyB/B,MAAzB;AACAH,IAAAA,UAAU,CAAC0C,WAAX;AACAjC,IAAAA,MAAM,CAACN,MAAD,CAAN,CAAeO,qBAAf,CAAqC,CAArC;AACAD,IAAAA,MAAM,CAACN,MAAD,CAAN,CAAeQ,wBAAf,CAAwC;AACtCgC,MAAAA,IAAI,EAAE5D,aAAa,CAAC6D,IADkB;AAEtCC,MAAAA,UAAU,EAAE7D,mBAF0B;AAGtC8D,MAAAA,QAAQ,EAAE7D;AAH4B,KAAxC,EAfwB,CAoBxB;;AACA,UAAM8D,OAAO,GAAG3C,IAAI,CAACC,EAAL,EAAhB;AACAL,IAAAA,UAAU,CAACgD,kBAAX,GAAgCD,OAAhC;AACA/C,IAAAA,UAAU,CAACiC,UAAX,GAAwB,IAAxB;AACAjC,IAAAA,UAAU,CAAC0C,WAAX;AACAjC,IAAAA,MAAM,CAACsC,OAAD,CAAN,CAAgBrC,qBAAhB,CAAsC,CAAtC;AACD,GA1BG,CAAJ;AA4BAX,EAAAA,IAAI,CAAC,wCAAD,EAA2C,MAAM;AACnD,UAAMC,UAAU,GAAIpB,QAAQ,CACzBqB,MADiB,eAEhB,oBAAC,eAAD;AACE,MAAA,UAAU,EAAC,sBADb;AAEE,MAAA,aAAa,EAAEZ,eAFjB;AAGE,MAAA,UAAU,EAAC;AAHb,MAFgB,EAQjBa,WARiB,EAApB,CADmD,CAUnD;;AACAE,IAAAA,IAAI,CAAC6C,aAAL;AACA,UAAM9C,MAAM,GAAGC,IAAI,CAACC,EAAL,EAAf;AACAL,IAAAA,UAAU,CAAC0C,WAAX,GAAyBvC,MAAzB;AACAH,IAAAA,UAAU,CAACoB,mBAAX;AACAX,IAAAA,MAAM,CAACyC,WAAD,CAAN,CAAoBxC,qBAApB,CAA0C,CAA1C;AACAD,IAAAA,MAAM,CAACyC,WAAD,CAAN,CAAoBvC,wBAApB,CACEF,MAAM,CAAC0C,GAAP,CAAWC,QAAX,CADF,EAEElE,YAFF;AAIAkB,IAAAA,IAAI,CAACiD,mBAAL,CAAyBnE,YAAY,GAAG,CAAxC;AACAuB,IAAAA,MAAM,CAACN,MAAD,CAAN,CAAeO,qBAAf,CAAqC,CAArC,EArBmD,CAsBnD;;AACAD,IAAAA,MAAM,CAACT,UAAU,CAACM,KAAX,CAAiBgD,cAAlB,CAAN,CAAwCC,OAAxC,CAAgD,IAAhD;AACA9C,IAAAA,MAAM,CAACT,UAAU,CAACM,KAAX,CAAiBkD,cAAlB,CAAN,CAAwChB,GAAxC,CAA4Ce,OAA5C,CAAoD,CAApD;AACA,QAAIE,UAAU,GAAGzD,UAAU,CAACM,KAAX,CAAiBkD,cAAlC;AACAxD,IAAAA,UAAU,CAACgD,kBAAX;AACAvC,IAAAA,MAAM,CAACiD,aAAD,CAAN,CAAsBhD,qBAAtB,CAA4C,CAA5C;AACAD,IAAAA,MAAM,CAACiD,aAAD,CAAN,CAAsB3B,oBAAtB,CAA2C0B,UAA3C;AACAhD,IAAAA,MAAM,CAACT,UAAU,CAACM,KAAX,CAAiBgD,cAAlB,CAAN,CAAwCC,OAAxC,CAAgD,KAAhD;AACA9C,IAAAA,MAAM,CAACT,UAAU,CAACM,KAAX,CAAiBkD,cAAlB,CAAN,CAAwCD,OAAxC,CAAgD,CAAhD;AACD,GA/BG,CAAJ;AAiCAxD,EAAAA,IAAI,CAAC,4BAAD,EAA+B,YAAY;AAC7C,UAAMC,UAAU,GAAIpB,QAAQ,CACzBqB,MADiB,eAEhB,oBAAC,eAAD;AACE,MAAA,UAAU,EAAC,sBADb;AAEE,MAAA,aAAa,EAAEZ,eAFjB;AAGE,MAAA,UAAU,EAAC;AAHb,MAFgB,EAQjBa,WARiB,EAApB;AASA,UAAMyD,iBAAiB,GAAGvD,IAAI,CAACC,EAAL,EAA1B;AACAL,IAAAA,UAAU,CAACkC,WAAX,GAAyByB,iBAAzB,CAX6C,CAY7C;;AACAvD,IAAAA,IAAI,CACDiC,KADH,CACSvD,YADT,EACuB,aADvB,EAEG8E,eAFH,CAEmBC,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAFnB;AAGA,UAAMC,WAAW,GAAG3D,IAAI,CACrBiC,KADiB,CACXvD,YADW,EACG,UADH,EAEjBkF,kBAFiB,CAEE,MAAMH,OAAO,CAACC,OAAR,CAAgB;AAAEnB,MAAAA,IAAI,EAAE;AAAR,KAAhB,CAFR,CAApB;AAGA,UAAMsB,YAAY,GAAG7D,IAAI,CACtBiC,KADkB,CACZvD,YADY,EACE,WADF,EAElBkF,kBAFkB,CAEC5D,IAAI,CAACC,EAAL,EAFD,CAArB,CAnB6C,CAuB7C;;AACA,UAAML,UAAU,CAACkE,WAAX,CAAuBlE,UAAU,CAACM,KAAX,CAAiB6D,UAAxC,CAAN;AACA1D,IAAAA,MAAM,CAACsD,WAAD,CAAN,CAAoBrD,qBAApB,CAA0C,CAA1C;AACAD,IAAAA,MAAM,CAACwD,YAAD,CAAN,CAAqBvD,qBAArB,CAA2C,CAA3C;AACAD,IAAAA,MAAM,CAACkD,iBAAD,CAAN,CAA0BjD,qBAA1B,CAAgD,CAAhD;AACD,GA5BG,CAAJ;AA8BAX,EAAAA,IAAI,CAAC,cAAD,EAAiB,MAAM;AACzB,UAAMC,UAAU,GAAIpB,QAAQ,CACzBqB,MADiB,eAEhB,oBAAC,eAAD;AACE,MAAA,UAAU,EAAC,sBADb;AAEE,MAAA,aAAa,EAAEZ,eAFjB;AAGE,MAAA,UAAU,EAAC;AAHb,MAFgB,EAQjBa,WARiB,EAApB;AASA,UAAMkE,cAAc,GAAG,yBAAvB,CAVyB,CAWzB;;AACA,UAAM7E,KAAK,GAAG;AACZ8E,MAAAA,WAAW,EAAE;AACXC,QAAAA,IAAI,EAAE;AADK;AADD,KAAd;AAKA/E,IAAAA,KAAK,CAAC8E,WAAN,CAAkBC,IAAlB,GAAyBnC,IAAI,CAACC,SAAL,CAAe;AACtCO,MAAAA,IAAI,EAAE5D,aAAa,CAACwF,GADkB;AAEtCC,MAAAA,GAAG,EAAEJ;AAFiC,KAAf,CAAzB,CAjByB,CAqBzB;;AACA,UAAMjE,MAAM,GAAGC,IAAI,CAACC,EAAL,EAAf;AACAL,IAAAA,UAAU,CAACkE,WAAX,GAAyB/D,MAAzB;AACAH,IAAAA,UAAU,CAACqB,WAAX,CAAuB9B,KAAvB;AACAkB,IAAAA,MAAM,CAACN,MAAD,CAAN,CAAeO,qBAAf,CAAqC,CAArC;AACAD,IAAAA,MAAM,CAACN,MAAD,CAAN,CAAeQ,wBAAf,CAAwCyD,cAAxC;AACD,GA3BG,CAAJ;AA6BArE,EAAAA,IAAI,CAAC,aAAD,EAAgB,MAAM;AACxB,UAAMC,UAAU,GAAIpB,QAAQ,CACzBqB,MADiB,eAEhB,oBAAC,eAAD;AACE,MAAA,UAAU,EAAC,sBADb;AAEE,MAAA,aAAa,EAAEZ,eAFjB;AAGE,MAAA,UAAU,EAAC;AAHb,MAFgB,EAQjBa,WARiB,EAApB,CADwB,CAUxB;;AACA,UAAMX,KAAK,GAAG;AACZ8E,MAAAA,WAAW,EAAE;AACXC,QAAAA,IAAI,EAAE;AADK;AADD,KAAd;AAKA/E,IAAAA,KAAK,CAAC8E,WAAN,CAAkBC,IAAlB,GAAyBnC,IAAI,CAACC,SAAL,CAAe;AACtCO,MAAAA,IAAI,EAAE5D,aAAa,CAAC0F;AADkB,KAAf,CAAzB,CAhBwB,CAmBxB;;AACA,UAAMtE,MAAM,GAAGC,IAAI,CAACC,EAAL,EAAf;AACAL,IAAAA,UAAU,CAACM,KAAX,CAAiBoE,gBAAjB,GAAoC,IAApC;AACA1E,IAAAA,UAAU,CAAC2E,cAAX,GAA4BxE,MAA5B;AACAH,IAAAA,UAAU,CAACqB,WAAX,CAAuB9B,KAAvB;AACAkB,IAAAA,MAAM,CAACN,MAAD,CAAN,CAAeO,qBAAf,CAAqC,CAArC;AACD,GAzBG,CAAJ;AA2BAX,EAAAA,IAAI,CAAC,KAAD,EAAQ,MAAM;AAChB,UAAMC,UAAU,GAAIpB,QAAQ,CACzBqB,MADiB,eAEhB,oBAAC,eAAD;AACE,MAAA,UAAU,EAAC,sBADb;AAEE,MAAA,aAAa,EAAEZ,eAFjB;AAGE,MAAA,UAAU,EAAC;AAHb,MAFgB,EAQjBa,WARiB,EAApB,CADgB,CAUhB;;AACA,UAAMX,KAAK,GAAG;AACZ8E,MAAAA,WAAW,EAAE;AACXC,QAAAA,IAAI,EAAE;AADK;AADD,KAAd;AAKA/E,IAAAA,KAAK,CAAC8E,WAAN,CAAkBC,IAAlB,GAAyBnC,IAAI,CAACC,SAAL,CAAe;AACtCO,MAAAA,IAAI,EAAE5D,aAAa,CAAC6F;AADkB,KAAf,CAAzB,CAhBgB,CAmBhB;;AACA,UAAMC,cAAc,GAAGzE,IAAI,CAACC,EAAL,EAAvB;AACAL,IAAAA,UAAU,CAACgD,kBAAX,GAAgC6B,cAAhC;AACA,UAAMC,iBAAiB,GAAG1E,IAAI,CAACC,EAAL,EAA1B;AACAL,IAAAA,UAAU,CAACM,KAAX,CAAiBC,aAAjB,CAA+BX,MAA/B,GAAwCkF,iBAAxC;AACA9E,IAAAA,UAAU,CAACqB,WAAX,CAAuB9B,KAAvB;AACAkB,IAAAA,MAAM,CAACoE,cAAD,CAAN,CAAuBnE,qBAAvB,CAA6C,CAA7C;AACAD,IAAAA,MAAM,CAACqE,iBAAD,CAAN,CAA0BpE,qBAA1B,CAAgD,CAAhD;AACD,GA3BG,CAAJ;AA6BAX,EAAAA,IAAI,CAAC,QAAD,EAAW,MAAM;AACnB,UAAMgF,UAAU,GAAG,EAAE,GAAG1F;AAAL,KAAnB;AACA,WAAO0F,UAAU,CAACnF,MAAlB;AACA,WAAOmF,UAAU,CAAClF,OAAlB;AACA,WAAOkF,UAAU,CAACjF,MAAlB;AAEA,UAAME,UAAU,GAAIpB,QAAQ,CACzBqB,MADiB,eAEhB,oBAAC,eAAD;AACE,MAAA,UAAU,EAAC,sBADb;AAEE,MAAA,aAAa,EAAE8E,UAFjB;AAGE,MAAA,UAAU,EAAC;AAHb,MAFgB,EAQjB7E,WARiB,EAApB;AAUAO,IAAAA,MAAM,CAACT,UAAU,CAACM,KAAX,CAAiB6D,UAAlB,CAAN,CAAoCvC,IAApC,CAAyC,sBAAzC;AACAnB,IAAAA,MAAM,CAACT,UAAU,CAACM,KAAX,CAAiBC,aAAjB,CAA+BX,MAAhC,CAAN,CAA8CoF,WAA9C;AACAvE,IAAAA,MAAM,CAACT,UAAU,CAACM,KAAX,CAAiBC,aAAjB,CAA+BV,OAAhC,CAAN,CAA+CmF,WAA/C;AACAvE,IAAAA,MAAM,CAACT,UAAU,CAACM,KAAX,CAAiBC,aAAjB,CAA+BT,MAAhC,CAAN,CAA8CkF,WAA9C,GAnBmB,CAqBnB;;AACAhF,IAAAA,UAAU,CAACiF,MAAX,CAAkB,sBAAlB,EAA0CF,UAA1C,EAAsDG,SAAtD;AACAzE,IAAAA,MAAM,CAACT,UAAU,CAACM,KAAX,CAAiB6E,UAAlB,CAAN,CAAoC5B,OAApC,CAA4C,EAA5C;AACD,GAxBG,CAAJ;AA0BAxD,EAAAA,IAAI,CAAC,gBAAD,EAAmB,MAAM;AAC3B,UAAMC,UAAU,GAAIpB,QAAQ,CACzBqB,MADiB,eAEhB,oBAAC,eAAD;AACE,MAAA,UAAU,EAAC,sBADb;AAEE,MAAA,aAAa,EAAEZ,eAFjB;AAGE,MAAA,UAAU,EAAC;AAHb,MAFgB,EAQjBa,WARiB,EAApB,CAD2B,CAW3B;;AACA,UAAMX,KAAU,GAAG;AACjB8E,MAAAA,WAAW,EAAE;AACXC,QAAAA,IAAI,EAAE;AADK;AADI,KAAnB;AAMAjC,IAAAA,KAAK,CAACrC,UAAD,EAAa,aAAb,CAAL,CAAiCsC,GAAjC,CAAqCC,WAArC;AACA9B,IAAAA,MAAM,CAACT,UAAU,CAACqB,WAAX,CAAuB+D,IAAvB,CAA4BpF,UAA5B,EAAwCT,KAAxC,CAAD,CAAN,CAAuDiD,GAAvD,CAA2DC,OAA3D,GAnB2B,CAqB3B;;AACAlD,IAAAA,KAAK,CAAC8E,WAAN,CAAkBC,IAAlB,GAAyB;AACvB3B,MAAAA,IAAI,EAAE5D,aAAa,CAACsG,MADG;AAEvBf,MAAAA,IAAI,EAAE;AACJ1D,QAAAA,IAAI,EAAE,GADF;AAEJC,QAAAA,MAAM,EAAE;AAFJ;AAFiB,KAAzB;AAQA,UAAMV,MAAM,GAAGC,IAAI,CAACC,EAAL,EAAf;AACAL,IAAAA,UAAU,CAACM,KAAX,CAAiBC,aAAjB,CAA+BjB,QAA/B,GAA0Ca,MAA1C;AACAH,IAAAA,UAAU,CAACqB,WAAX,CAAuB9B,KAAvB;AACAkB,IAAAA,MAAM,CAACN,MAAD,CAAN,CAAeQ,wBAAf,CAAwC;AACtCgC,MAAAA,IAAI,EAAE5D,aAAa,CAACsG,MADkB;AAEtCf,MAAAA,IAAI,EAAE;AACJ1D,QAAAA,IAAI,EAAE,GADF;AAEJC,QAAAA,MAAM,EAAE;AAFJ;AAFgC,KAAxC,EAjC2B,CAyC3B;;AACAtB,IAAAA,KAAK,CAAC8E,WAAN,CAAkBC,IAAlB,GAAyBnC,IAAI,CAACC,SAAL,CAAe;AACtCO,MAAAA,IAAI,EAAE5D,aAAa,CAACsG,MADkB;AAEtCf,MAAAA,IAAI,EAAE;AACJ1D,QAAAA,IAAI,EAAE,GADF;AAEJC,QAAAA,MAAM,EAAE;AAFJ;AAFgC,KAAf,CAAzB;AAQAb,IAAAA,UAAU,CAACqB,WAAX,CAAuB9B,KAAvB;AACAkB,IAAAA,MAAM,CAACN,MAAD,CAAN,CAAeQ,wBAAf,CAAwC;AACtCgC,MAAAA,IAAI,EAAE5D,aAAa,CAACsG,MADkB;AAEtCf,MAAAA,IAAI,EAAE;AACJ1D,QAAAA,IAAI,EAAE,GADF;AAEJC,QAAAA,MAAM,EAAE;AAFJ;AAFgC,KAAxC;AAOD,GA1DG,CAAJ;AA4DAd,EAAAA,IAAI,CAAC,cAAD,EAAiB,MAAM;AACzB,UAAMC,UAAU,GAAIpB,QAAQ,CACzBqB,MADiB,eAEhB,oBAAC,eAAD;AACE,MAAA,UAAU,EAAC,sBADb;AAEE,MAAA,aAAa,EAAEZ,eAFjB;AAGE,MAAA,UAAU,EAAC;AAHb,MAFgB,EAQjBa,WARiB,EAApB,CADyB,CAUzB;;AACA,UAAMX,KAAK,GAAG;AACZ8E,MAAAA,WAAW,EAAE;AACXC,QAAAA,IAAI,EAAE;AADK;AADD,KAAd;AAKA/E,IAAAA,KAAK,CAAC8E,WAAN,CAAkBC,IAAlB,GAAyBnC,IAAI,CAACC,SAAL,CAAe;AACtCO,MAAAA,IAAI,EAAE5D,aAAa,CAACsG,MADkB;AAEtCf,MAAAA,IAAI,EAAE;AACJ1D,QAAAA,IAAI,EAAE,GADF;AAEJC,QAAAA,MAAM,EAAE;AAFJ;AAFgC,KAAf,CAAzB,CAhByB,CAuBzB;;AACA,UAAMV,MAAM,GAAGC,IAAI,CAACC,EAAL,EAAf;AACAL,IAAAA,UAAU,CAACM,KAAX,CAAiBC,aAAjB,CAA+BjB,QAA/B,GAA0Ca,MAA1C;AACAH,IAAAA,UAAU,CAACqB,WAAX,CAAuB9B,KAAvB;AACAkB,IAAAA,MAAM,CAACN,MAAD,CAAN,CAAeO,qBAAf,CAAqC,CAArC;AACAD,IAAAA,MAAM,CAACN,MAAD,CAAN,CAAeQ,wBAAf,CAAwC;AACtCgC,MAAAA,IAAI,EAAE5D,aAAa,CAACsG,MADkB;AAEtCf,MAAAA,IAAI,EAAE;AACJ1D,QAAAA,IAAI,EAAE,GADF;AAEJC,QAAAA,MAAM,EAAE;AAFJ;AAFgC,KAAxC;AAOD,GAnCG,CAAJ;AAqCAd,EAAAA,IAAI,CAAC,YAAD,EAAe,MAAM;AACvB,UAAMC,UAAU,GAAIpB,QAAQ,CACzBqB,MADiB,eAEhB,oBAAC,eAAD;AACE,MAAA,UAAU,EAAC,sBADb;AAEE,MAAA,aAAa,EAAEZ,eAFjB;AAGE,MAAA,UAAU,EAAC;AAHb,MAFgB,EAQjBa,WARiB,EAApB,CADuB,CAUvB;;AACA,UAAMX,KAAK,GAAG;AACZ8E,MAAAA,WAAW,EAAE;AACXC,QAAAA,IAAI,EAAE;AADK;AADD,KAAd;AAKA/E,IAAAA,KAAK,CAAC8E,WAAN,CAAkBC,IAAlB,GAAyBnC,IAAI,CAACC,SAAL,CAAe;AACtCO,MAAAA,IAAI,EAAE5D,aAAa,CAACuG,IADkB;AAEtChB,MAAAA,IAAI,EAAE;AACJ1D,QAAAA,IAAI,EAAE,GADF;AAEJC,QAAAA,MAAM,EAAE;AAFJ;AAFgC,KAAf,CAAzB,CAhBuB,CAuBvB;;AACA,UAAMV,MAAM,GAAGC,IAAI,CAACC,EAAL,EAAf;AACAL,IAAAA,UAAU,CAACM,KAAX,CAAiBC,aAAjB,CAA+Bb,MAA/B,GAAwCS,MAAxC;AACAH,IAAAA,UAAU,CAACqB,WAAX,CAAuB9B,KAAvB;AACAkB,IAAAA,MAAM,CAACN,MAAD,CAAN,CAAeO,qBAAf,CAAqC,CAArC;AACAD,IAAAA,MAAM,CAACN,MAAD,CAAN,CAAeQ,wBAAf,CAAwC;AACtCgC,MAAAA,IAAI,EAAE5D,aAAa,CAACuG,IADkB;AAEtChB,MAAAA,IAAI,EAAE;AACJ1D,QAAAA,IAAI,EAAE,GADF;AAEJC,QAAAA,MAAM,EAAE;AAFJ;AAFgC,KAAxC;AAOD,GAnCG,CAAJ;AAqCAd,EAAAA,IAAI,CAAC,aAAD,EAAgB,MAAM;AACxB,UAAMC,UAAU,GAAIpB,QAAQ,CACzBqB,MADiB,eAEhB,oBAAC,eAAD;AACE,MAAA,UAAU,EAAC,sBADb;AAEE,MAAA,aAAa,EAAEZ,eAFjB;AAGE,MAAA,UAAU,EAAC;AAHb,MAFgB,EAQjBa,WARiB,EAApB,CADwB,CAUxB;;AACA,UAAMX,KAAK,GAAG;AACZ8E,MAAAA,WAAW,EAAE;AACXC,QAAAA,IAAI,EAAE;AADK;AADD,KAAd;AAKA/E,IAAAA,KAAK,CAAC8E,WAAN,CAAkBC,IAAlB,GAAyBnC,IAAI,CAACC,SAAL,CAAe;AACtCO,MAAAA,IAAI,EAAE5D,aAAa,CAACwG,KADkB;AAEtCjB,MAAAA,IAAI,EAAE;AACJ1D,QAAAA,IAAI,EAAE,GADF;AAEJC,QAAAA,MAAM,EAAE;AAFJ;AAFgC,KAAf,CAAzB,CAhBwB,CAuBxB;;AACA,UAAMV,MAAM,GAAGC,IAAI,CAACC,EAAL,EAAf;AACAL,IAAAA,UAAU,CAACM,KAAX,CAAiBC,aAAjB,CAA+BZ,OAA/B,GAAyCQ,MAAzC;AACAH,IAAAA,UAAU,CAACqB,WAAX,CAAuB9B,KAAvB;AACAkB,IAAAA,MAAM,CAACN,MAAD,CAAN,CAAeO,qBAAf,CAAqC,CAArC;AACAD,IAAAA,MAAM,CAACN,MAAD,CAAN,CAAeQ,wBAAf,CAAwC;AACtCgC,MAAAA,IAAI,EAAE5D,aAAa,CAACwG,KADkB;AAEtCjB,MAAAA,IAAI,EAAE;AACJ1D,QAAAA,IAAI,EAAE,GADF;AAEJC,QAAAA,MAAM,EAAE;AAFJ;AAFgC,KAAxC;AAOD,GAnCG,CAAJ;AAqCAd,EAAAA,IAAI,CAAC,aAAD,EAAgB,MAAM;AACxB,UAAMC,UAAU,GAAIpB,QAAQ,CACzBqB,MADiB,eAEhB,oBAAC,eAAD;AACE,MAAA,UAAU,EAAC,sBADb;AAEE,MAAA,aAAa,EAAEZ,eAFjB;AAGE,MAAA,UAAU,EAAC;AAHb,MAFgB,EAQjBa,WARiB,EAApB,CADwB,CAUxB;;AACA,UAAMX,KAAK,GAAG;AACZ8E,MAAAA,WAAW,EAAE;AACXC,QAAAA,IAAI,EAAE;AADK;AADD,KAAd;AAKA/E,IAAAA,KAAK,CAAC8E,WAAN,CAAkBC,IAAlB,GAAyBnC,IAAI,CAACC,SAAL,CAAe;AACtCO,MAAAA,IAAI,EAAE5D,aAAa,CAACyG,KADkB;AAEtClB,MAAAA,IAAI,EAAE;AACJmB,QAAAA,MAAM,EAAE,EADJ;AAEJC,QAAAA,MAAM,EAAE;AAFJ;AAFgC,KAAf,CAAzB,CAhBwB,CAuBxB;;AACA,UAAMvF,MAAM,GAAGC,IAAI,CAACC,EAAL,EAAf;AACAL,IAAAA,UAAU,CAACM,KAAX,CAAiBC,aAAjB,CAA+BV,OAA/B,GAAyCM,MAAzC;AACAH,IAAAA,UAAU,CAACqB,WAAX,CAAuB9B,KAAvB;AACAkB,IAAAA,MAAM,CAACN,MAAD,CAAN,CAAeO,qBAAf,CAAqC,CAArC;AACAD,IAAAA,MAAM,CAACN,MAAD,CAAN,CAAeQ,wBAAf,CAAwC;AACtC8E,MAAAA,MAAM,EAAE,EAD8B;AAEtCC,MAAAA,MAAM,EAAE;AAF8B,KAAxC;AAID,GAhCG,CAAJ;AAkCA3F,EAAAA,IAAI,CAAC,YAAD,EAAe,MAAM;AACvB,UAAMC,UAAU,GAAIpB,QAAQ,CACzBqB,MADiB,eAEhB,oBAAC,eAAD;AACE,MAAA,UAAU,EAAC,sBADb;AAEE,MAAA,aAAa,EAAEZ,eAFjB;AAGE,MAAA,UAAU,EAAC;AAHb,MAFgB,EAQjBa,WARiB,EAApB,CADuB,CAUvB;;AACA,UAAMX,KAAK,GAAG;AACZ8E,MAAAA,WAAW,EAAE;AACXC,QAAAA,IAAI,EAAE;AADK;AADD,KAAd;AAKA/E,IAAAA,KAAK,CAAC8E,WAAN,CAAkBC,IAAlB,GAAyBnC,IAAI,CAACC,SAAL,CAAe;AACtCO,MAAAA,IAAI,EAAE5D,aAAa,CAAC4G,IADkB;AAEtCrB,MAAAA,IAAI,EAAE;AACJsB,QAAAA,MAAM,EAAE,YADJ;AAEJC,QAAAA,UAAU,EAAE,YAFR;AAGJC,QAAAA,UAAU,EAAE,IAHR;AAIJC,QAAAA,SAAS,EAAE,eAJP;AAKJC,QAAAA,SAAS,EACP,kEANE;AAOJC,QAAAA,SAAS,EAAE,eAPP;AAQJC,QAAAA,GAAG,EAAE,eARD;AASJvD,QAAAA,IAAI,EAAE;AATF;AAFgC,KAAf,CAAzB,CAhBuB,CA8BvB;;AACA,UAAMxC,MAAM,GAAGC,IAAI,CAACC,EAAL,EAAf;AACAL,IAAAA,UAAU,CAACM,KAAX,CAAiBC,aAAjB,CAA+BT,MAA/B,GAAwCK,MAAxC;AACAH,IAAAA,UAAU,CAACqB,WAAX,CAAuB9B,KAAvB;AACAkB,IAAAA,MAAM,CAACN,MAAD,CAAN,CAAeO,qBAAf,CAAqC,CAArC;AACAD,IAAAA,MAAM,CAACN,MAAD,CAAN,CAAeQ,wBAAf,CAAwC;AACtCiF,MAAAA,MAAM,EAAE,YAD8B;AAEtCC,MAAAA,UAAU,EAAE,YAF0B;AAGtCC,MAAAA,UAAU,EAAE,IAH0B;AAItCC,MAAAA,SAAS,EAAE,eAJ2B;AAKtCC,MAAAA,SAAS,EACP,kEANoC;AAOtCC,MAAAA,SAAS,EAAE,eAP2B;AAQtCC,MAAAA,GAAG,EAAE,eARiC;AAStCvD,MAAAA,IAAI,EAAE;AATgC,KAAxC;AAWD,GA9CG,CAAJ;AA+CD,CAlkBO,CAAR","sourcesContent":["import React from 'react';\nimport renderer from 'react-test-renderer';\nimport { ConnectEventHandlers, FinicityConnect } from './index';\nimport InAppBrowser from 'react-native-inappbrowser-reborn';\nimport {\n  ConnectEvents,\n  CONNECT_SDK_VERSION,\n  SDK_PLATFORM,\n  PING_TIMEOUT,\n} from './constants';\nimport { WebViewMessageEvent } from 'react-native-webview';\nimport { Platform } from 'react-native';\n\ndescribe('FinicityConnect', () => {\n  const eventHandlerFns: ConnectEventHandlers = {\n    onCancel: (event: any) => {\n      console.log('cancel event received', event);\n    },\n    onDone: (event: any) => {\n      console.log('done event received', event);\n    },\n    onError: (event: any) => {\n      console.log('error event received', event);\n    },\n    onLoad: () => {\n      console.log('loaded event received', event);\n    },\n    onRoute: (event: any) => {\n      console.log('route event received', event);\n    },\n    onUser: (event: any) => {\n      console.log('user event received', event);\n    },\n  };\n\n  test('close', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    const mockFn = jest.fn();\n    instanceOf.state.eventHandlers.onCancel = mockFn;\n    instanceOf.close();\n    expect(mockFn).toHaveBeenCalledTimes(1);\n    expect(mockFn).toHaveBeenLastCalledWith({ code: 100, reason: 'exit' });\n  });\n\n  test('render', () => {\n    const mockEvent = { test: true };\n    // android\n    Platform.OS = 'android';\n    let testRenderer = renderer.create(\n      <FinicityConnect\n        connectUrl=\"https://finicity.com\"\n        eventHandlers={eventHandlerFns}\n        linkingUri=\"\"\n      />\n    );\n    let instanceOf: any = testRenderer.getInstance();\n\n    let startPingingConnectMockFn = jest.fn();\n    let closeMockFn = jest.fn();\n    let handleEventMockFn = jest.fn();\n    instanceOf.startPingingConnect = startPingingConnectMockFn;\n    instanceOf.close = closeMockFn;\n    instanceOf.handleEvent = handleEventMockFn;\n    let modal = testRenderer.root.findByType('Modal' as React.ElementType);\n    let webview = testRenderer.root.findByType(\n      'RNCWebView' as React.ElementType\n    );\n    webview.props.onLoad();\n    expect(modal.props.presentationStyle).toBe('fullScreen');\n    expect(startPingingConnectMockFn).toHaveBeenCalled();\n\n    webview.props.onMessage(mockEvent);\n    expect(handleEventMockFn).toHaveBeenCalledWith(mockEvent);\n\n    modal.props.onRequestClose();\n    expect(closeMockFn).toHaveBeenCalled();\n\n    // ios\n    Platform.OS = 'ios';\n    testRenderer = renderer.create(\n      <FinicityConnect\n        connectUrl=\"https://finicity.com\"\n        eventHandlers={eventHandlerFns}\n        linkingUri=\"\"\n      />\n    );\n\n    instanceOf = testRenderer.getInstance();\n\n    startPingingConnectMockFn = jest.fn();\n    closeMockFn = jest.fn();\n    handleEventMockFn = jest.fn();\n    instanceOf.startPingingConnect = startPingingConnectMockFn;\n    instanceOf.close = closeMockFn;\n    instanceOf.handleEvent = handleEventMockFn;\n    modal = testRenderer.root.findByType('Modal' as React.ElementType);\n    webview = testRenderer.root.findByType('RNCWebView' as React.ElementType);\n    webview.props.onLoad();\n    expect(modal.props.presentationStyle).toBe('pageSheet');\n    expect(startPingingConnectMockFn).toHaveBeenCalled();\n\n    webview.props.onMessage(mockEvent);\n    expect(handleEventMockFn).toHaveBeenCalledWith(mockEvent);\n\n    modal.props.onRequestClose();\n    expect(closeMockFn).toHaveBeenCalled();\n  });\n\n  test('postMessage', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    const mockFn = jest.fn();\n    instanceOf.webViewRef = { postMessage: mockFn } as any;\n    instanceOf.postMessage({ test: true });\n    expect(mockFn).toHaveBeenCalledWith(JSON.stringify({ test: true }));\n\n    // handle null webView\n    instanceOf.webViewRef = null;\n    spyOn(instanceOf, 'postMessage').and.callThrough();\n    expect(instanceOf.postMessage).not.toThrow();\n  });\n\n  test('pingConnect', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    // expect postMessage to be called to inform Connect of SDK\n    const mockFn = jest.fn();\n    instanceOf.postMessage = mockFn;\n    instanceOf.pingConnect();\n    expect(mockFn).toHaveBeenCalledTimes(1);\n    expect(mockFn).toHaveBeenLastCalledWith({\n      type: ConnectEvents.PING,\n      sdkVersion: CONNECT_SDK_VERSION,\n      platform: SDK_PLATFORM,\n    });\n    // expect to call stopPingingConnect if webViewRef = null\n    const mockFn2 = jest.fn();\n    instanceOf.stopPingingConnect = mockFn2;\n    instanceOf.webViewRef = null;\n    instanceOf.pingConnect();\n    expect(mockFn2).toHaveBeenCalledTimes(1);\n  });\n\n  test('startPingingConnect/stopPingingConnect', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    // expect to use set interval timer to post ping message to Connect\n    jest.useFakeTimers();\n    const mockFn = jest.fn();\n    instanceOf.pingConnect = mockFn;\n    instanceOf.startPingingConnect();\n    expect(setInterval).toHaveBeenCalledTimes(1);\n    expect(setInterval).toHaveBeenLastCalledWith(\n      expect.any(Function),\n      PING_TIMEOUT\n    );\n    jest.advanceTimersByTime(PING_TIMEOUT + 1);\n    expect(mockFn).toHaveBeenCalledTimes(1);\n    // Stop pinging Connect\n    expect(instanceOf.state.pingingConnect).toEqual(true);\n    expect(instanceOf.state.pingIntervalId).not.toEqual(0);\n    let intervalId = instanceOf.state.pingIntervalId;\n    instanceOf.stopPingingConnect();\n    expect(clearInterval).toHaveBeenCalledTimes(1);\n    expect(clearInterval).toHaveBeenCalledWith(intervalId);\n    expect(instanceOf.state.pingingConnect).toEqual(false);\n    expect(instanceOf.state.pingIntervalId).toEqual(0);\n  });\n\n  test('openBrowser/dismissBrowser', async () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    const postMessageMockFn = jest.fn();\n    instanceOf.postMessage = postMessageMockFn;\n    // Setup spies for InAppBrowser calls\n    jest\n      .spyOn(InAppBrowser, 'isAvailable')\n      .mockReturnValue(Promise.resolve(true));\n    const spyOpenAuth = jest\n      .spyOn(InAppBrowser, 'openAuth')\n      .mockImplementation(() => Promise.resolve({ type: 'cancel' }));\n    const spyCloseAuth = jest\n      .spyOn(InAppBrowser, 'closeAuth')\n      .mockImplementation(jest.fn());\n\n    // Open Browser, and from above mock cancel\n    await instanceOf.openBrowser(instanceOf.state.connectUrl);\n    expect(spyOpenAuth).toHaveBeenCalledTimes(1);\n    expect(spyCloseAuth).toHaveBeenCalledTimes(1);\n    expect(postMessageMockFn).toHaveBeenCalledTimes(1);\n  });\n\n  test('redirect Url', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    const urlRedirectStr = 'https://redirectUrl.com';\n    // create redirect event\n    const event = {\n      nativeEvent: {\n        data: '',\n      },\n    } as WebViewMessageEvent;\n    event.nativeEvent.data = JSON.stringify({\n      type: ConnectEvents.URL,\n      url: urlRedirectStr,\n    });\n    // mock openBrowser to catch call to openBrowser on redirect\n    const mockFn = jest.fn();\n    instanceOf.openBrowser = mockFn;\n    instanceOf.handleEvent(event);\n    expect(mockFn).toHaveBeenCalledTimes(1);\n    expect(mockFn).toHaveBeenLastCalledWith(urlRedirectStr);\n  });\n\n  test('close popup', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    // create close popup event\n    const event = {\n      nativeEvent: {\n        data: '',\n      },\n    } as WebViewMessageEvent;\n    event.nativeEvent.data = JSON.stringify({\n      type: ConnectEvents.CLOSE_POPUP,\n    });\n    // mock dismiss browser to catch call to dismissBrowser, set state to browser displayed.\n    const mockFn = jest.fn();\n    instanceOf.state.browserDisplayed = true;\n    instanceOf.dismissBrowser = mockFn;\n    instanceOf.handleEvent(event);\n    expect(mockFn).toHaveBeenCalledTimes(1);\n  });\n\n  test('ack', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    // create ack event\n    const event = {\n      nativeEvent: {\n        data: '',\n      },\n    } as WebViewMessageEvent;\n    event.nativeEvent.data = JSON.stringify({\n      type: ConnectEvents.ACK,\n    });\n    // mock stopPingingConnect, and eventHandler loaded to catch calls to these functions\n    const mockStopPingFn = jest.fn();\n    instanceOf.stopPingingConnect = mockStopPingFn;\n    const mockLoadedEventFn = jest.fn();\n    instanceOf.state.eventHandlers.onLoad = mockLoadedEventFn;\n    instanceOf.handleEvent(event);\n    expect(mockStopPingFn).toHaveBeenCalledTimes(1);\n    expect(mockLoadedEventFn).toHaveBeenCalledTimes(1);\n  });\n\n  test('launch', () => {\n    const evHandlers = { ...eventHandlerFns };\n    delete evHandlers.onLoad;\n    delete evHandlers.onRoute;\n    delete evHandlers.onUser;\n\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={evHandlers}\n          linkingUri=\"testApp\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n\n    expect(instanceOf.state.connectUrl).toBe('https://finicity.com');\n    expect(instanceOf.state.eventHandlers.onLoad).toBeDefined();\n    expect(instanceOf.state.eventHandlers.onRoute).toBeDefined();\n    expect(instanceOf.state.eventHandlers.onUser).toBeDefined();\n\n    // check for empty linkingUri\n    instanceOf.launch('https://finicity.com', evHandlers, undefined);\n    expect(instanceOf.state.linkingUri).toEqual('');\n  });\n\n  test('parseEventData', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n\n    // invalid JSON event\n    const event: any = {\n      nativeEvent: {\n        data: '{0}',\n      },\n    };\n\n    spyOn(instanceOf, 'handleEvent').and.callThrough();\n    expect(instanceOf.handleEvent.bind(instanceOf, event)).not.toThrow();\n\n    // valid event\n    event.nativeEvent.data = {\n      type: ConnectEvents.CANCEL,\n      data: {\n        code: 100,\n        reason: 'exit',\n      },\n    };\n\n    const mockFn = jest.fn();\n    instanceOf.state.eventHandlers.onCancel = mockFn;\n    instanceOf.handleEvent(event);\n    expect(mockFn).toHaveBeenLastCalledWith({\n      type: ConnectEvents.CANCEL,\n      data: {\n        code: 100,\n        reason: 'exit',\n      },\n    });\n\n    // valid JSON event\n    event.nativeEvent.data = JSON.stringify({\n      type: ConnectEvents.CANCEL,\n      data: {\n        code: 100,\n        reason: 'exit',\n      },\n    });\n\n    instanceOf.handleEvent(event);\n    expect(mockFn).toHaveBeenLastCalledWith({\n      type: ConnectEvents.CANCEL,\n      data: {\n        code: 100,\n        reason: 'exit',\n      },\n    });\n  });\n\n  test('cancel Event', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    // create cancel event\n    const event = {\n      nativeEvent: {\n        data: '',\n      },\n    } as WebViewMessageEvent;\n    event.nativeEvent.data = JSON.stringify({\n      type: ConnectEvents.CANCEL,\n      data: {\n        code: 100,\n        reason: 'exit',\n      },\n    });\n    // mock cancel event callback\n    const mockFn = jest.fn();\n    instanceOf.state.eventHandlers.onCancel = mockFn;\n    instanceOf.handleEvent(event);\n    expect(mockFn).toHaveBeenCalledTimes(1);\n    expect(mockFn).toHaveBeenLastCalledWith({\n      type: ConnectEvents.CANCEL,\n      data: {\n        code: 100,\n        reason: 'exit',\n      },\n    });\n  });\n\n  test('done Event', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    // create done event\n    const event = {\n      nativeEvent: {\n        data: '',\n      },\n    } as WebViewMessageEvent;\n    event.nativeEvent.data = JSON.stringify({\n      type: ConnectEvents.DONE,\n      data: {\n        code: 200,\n        reason: 'complete',\n      },\n    });\n    // mock done event callback\n    const mockFn = jest.fn();\n    instanceOf.state.eventHandlers.onDone = mockFn;\n    instanceOf.handleEvent(event);\n    expect(mockFn).toHaveBeenCalledTimes(1);\n    expect(mockFn).toHaveBeenLastCalledWith({\n      type: ConnectEvents.DONE,\n      data: {\n        code: 200,\n        reason: 'complete',\n      },\n    });\n  });\n\n  test('error Event', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    // create error event\n    const event = {\n      nativeEvent: {\n        data: '',\n      },\n    } as WebViewMessageEvent;\n    event.nativeEvent.data = JSON.stringify({\n      type: ConnectEvents.ERROR,\n      data: {\n        code: 500,\n        reason: 'error',\n      },\n    });\n    // mock error event callback\n    const mockFn = jest.fn();\n    instanceOf.state.eventHandlers.onError = mockFn;\n    instanceOf.handleEvent(event);\n    expect(mockFn).toHaveBeenCalledTimes(1);\n    expect(mockFn).toHaveBeenLastCalledWith({\n      type: ConnectEvents.ERROR,\n      data: {\n        code: 500,\n        reason: 'error',\n      },\n    });\n  });\n\n  test('route Event', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    // create route event\n    const event = {\n      nativeEvent: {\n        data: '',\n      },\n    } as WebViewMessageEvent;\n    event.nativeEvent.data = JSON.stringify({\n      type: ConnectEvents.ROUTE,\n      data: {\n        params: {},\n        screen: 'search',\n      },\n    });\n    // mock route event callback\n    const mockFn = jest.fn();\n    instanceOf.state.eventHandlers.onRoute = mockFn;\n    instanceOf.handleEvent(event);\n    expect(mockFn).toHaveBeenCalledTimes(1);\n    expect(mockFn).toHaveBeenLastCalledWith({\n      params: {},\n      screen: 'search',\n    });\n  });\n\n  test('user Event', () => {\n    const instanceOf = (renderer\n      .create(\n        <FinicityConnect\n          connectUrl=\"https://finicity.com\"\n          eventHandlers={eventHandlerFns}\n          linkingUri=\"\"\n        />\n      )\n      .getInstance() as unknown) as FinicityConnect;\n    // create user event\n    const event = {\n      nativeEvent: {\n        data: '',\n      },\n    } as WebViewMessageEvent;\n    event.nativeEvent.data = JSON.stringify({\n      type: ConnectEvents.USER,\n      data: {\n        action: 'Initialize',\n        customerId: '5003205004',\n        experience: null,\n        partnerId: '2445582695152',\n        sessionId:\n          'c004a06ffc4cccd485df796fba74f1a4b647ab4fee3e691b227db2d6b2c5d9e3',\n        timestamp: '1617009241542',\n        ttl: '1617016441542',\n        type: 'default',\n      },\n    });\n    // mock user event callback\n    const mockFn = jest.fn();\n    instanceOf.state.eventHandlers.onUser = mockFn;\n    instanceOf.handleEvent(event);\n    expect(mockFn).toHaveBeenCalledTimes(1);\n    expect(mockFn).toHaveBeenLastCalledWith({\n      action: 'Initialize',\n      customerId: '5003205004',\n      experience: null,\n      partnerId: '2445582695152',\n      sessionId:\n        'c004a06ffc4cccd485df796fba74f1a4b647ab4fee3e691b227db2d6b2c5d9e3',\n      timestamp: '1617009241542',\n      ttl: '1617016441542',\n      type: 'default',\n    });\n  });\n});\n"]}