{"version":3,"sources":["index.tsx"],"names":["React","Component","Modal","Platform","WebView","WebBrowser","Constants","CONNECT_SDK_VERSION","SDK_PLATFORM","PING_TIMEOUT","styles","container","flex","defaultOptions","loaded","event","done","cancel","error","user","route","ConnectEvents","ACK","CLOSE_POPUP","PING","URL","CANCEL","DONE","ERROR","LOADED","ROUTE","SUCCESS","USER","FinicityConnect","constructor","props","show","webView","connectUrl","pingingConnect","pingedConnectSuccessfully","pingIntervalId","options","setState","resetState","state","postMessage","type","sdkVersion","platform","stopPingingConnect","setInterval","pingConnect","clearInterval","closed","OS","dismissBrowser","url","openAuthSessionAsync","linkingUri","eventData","JSON","stringify","render","close","ref","webview","uri","parseEventData","nativeEvent","data","eventType","openBrowser","startPingingConnect","parse","e"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Modal, Platform } from 'react-native';\nimport { WebView } from 'react-native-webview';\nimport * as WebBrowser from 'expo-web-browser';\nimport Constants from 'expo-constants';\n\nconst CONNECT_SDK_VERSION = '1.0.0';\nconst SDK_PLATFORM = 'reactNative';\nconst PING_TIMEOUT = 1000;\n\nconst styles = {\n  container: {\n    flex: 1,\n  },\n};\n\nconst defaultOptions = {\n  loaded: (event: any) => {},\n  done: (event: any) => {},\n  cancel: (event: any) => {},\n  error: (event: any) => {},\n  user: (event: any) => {},\n  route: (event: any) => {}\n};\n\nconst ConnectEvents = {\n  // Internal events used by Connect\n  ACK: 'ack',\n  CLOSE_POPUP: 'closePopup',\n  PING: 'ping',\n  URL: 'url',\n\n  // App events exposed to developers\n  CANCEL: 'cancel',\n  DONE: 'done',\n  ERROR: 'error',\n  LOADED: 'loaded',\n  ROUTE: 'route',\n  SUCCESS: 'success',\n  USER: 'user',\n};\n\nclass FinicityConnect extends Component {\n  state = {\n    show: false,\n    webView: null,\n    connectUrl: '',\n    pingingConnect: false,\n    pingedConnectSuccessfully: false,\n    pingIntervalId: 0,\n    options: defaultOptions,\n  };\n  \n  constructor(props: any) {\n    super(props);\n  }\n\n  resetState = () => {\n    this.setState({ show: false });\n    this.setState({ pingingConnect: false });\n    this.setState({ pingedConnectSuccessfully: false });\n    this.setState({ pingIntervalId: 0 });\n    this.setState({ webView: null });\n    this.setState({ connectUrl: '' });\n  };\n\n  connectWithUrl = (connectUrl: string, options: any) => {\n    this.setState({ connectUrl: connectUrl });\n    this.setState({ options: { ...defaultOptions, ...options } });\n    this.setState({ show: true });\n  };\n\n  close = () => {\n    this.resetState();\n  };\n\n  postMessage(eventData: any) {\n    (this.state.webView as any).postMessage(JSON.stringify(eventData));\n  }\n\n  pingConnect = () => {\n    if (this.state.webView != null) {\n      // console.log(\"sending ping event\");\n      this.postMessage({\n        type: ConnectEvents.PING,\n        sdkVersion: CONNECT_SDK_VERSION,\n        platform: SDK_PLATFORM,\n      });\n    } else {\n      this.stopPingingConnect();\n    }\n  };\n\n  startPingingConnect = () => {\n    if (\n      this.state.webView != null &&\n      !this.state.pingedConnectSuccessfully &&\n      !this.state.pingingConnect &&\n      this.state.pingIntervalId == 0\n    ) {\n      this.state.pingingConnect = true;\n      (this.state.pingIntervalId as any) = setInterval(this.pingConnect, PING_TIMEOUT);\n      // console.log(\"Start sending pinging event to connect with pingIntervalId=\" + this.state.pingIntervalId);\n    }\n  };\n\n  stopPingingConnect = () => {\n    if (this.state.pingingConnect && this.state.pingIntervalId != 0) {\n      // console.log(\"Got ping ack from connect, stop sending ping event for pingIntervalId=\" + this.state.pingIntervalId);\n      clearInterval(this.state.pingIntervalId);\n      this.state.pingingConnect = false;\n      this.state.pingIntervalId = 0;\n    }\n  };\n\n  dismissBrowser = () => {\n    this.postMessage({ type: 'window', closed: true });\n    if (Platform.OS === 'ios') {\n      WebBrowser.dismissBrowser();\n    }\n    // TODO: dismiss browser through deep linking (requires changes on the backend)\n  };\n\n  openBrowser = async (url: string) => {\n    // NOTE: using openBrowserAsync is inconsistent between iOS and Android\n    await WebBrowser.openAuthSessionAsync(url, Constants.linkingUri);\n    this.dismissBrowser();\n  };\n\n  render() {\n    let { show } = this.state;\n\n    return (\n      <Modal\n        animationType={'slide'}\n        presentationStyle={Platform.OS === 'ios' ? 'pageSheet' : 'fullScreen'}\n        transparent={false}\n        visible={show}\n        onRequestClose={this.close}\n      >\n        <WebView\n          ref={(ref) => (this.setState({ webview: ref }))}\n          source={{ uri: this.state.connectUrl }}\n          onMessage={(event) => {\n            const eventData = parseEventData(event.nativeEvent.data);\n            const eventType = eventData.type;\n            // console.log(\"CONNECT EVT-TYPE: \" + eventType);\n            if (eventType === ConnectEvents.URL) {\n              const url = eventData.url;\n              this.openBrowser(url);\n            } else if (eventType === ConnectEvents.CLOSE_POPUP) {\n              this.dismissBrowser();\n            } else if (eventType === ConnectEvents.ACK) {\n              this.state.pingedConnectSuccessfully = true;\n              this.stopPingingConnect();\n              const eventData = { type: ConnectEvents.LOADED, data: null };\n              this.state.options.loaded(eventData);\n            } else if (eventType === ConnectEvents.CANCEL) {\n              this.state.options.cancel(eventData);\n              this.close();\n            } else if (eventType === ConnectEvents.DONE) {\n              this.state.options.done(eventData);\n              this.close();\n            } else if (eventType === ConnectEvents.ERROR) {\n              this.state.options.error(eventData);\n              this.close();\n            } else if (eventType === ConnectEvents.ROUTE) {\n              this.state.options.route(eventData);\n            } else if (eventType === ConnectEvents.USER) {\n              this.state.options.user(eventData);\n            }\n          }}\n          onLoad={() => {\n            this.startPingingConnect();\n          }}\n        />\n      </Modal>\n    );\n  }\n}\n\nexport default FinicityConnect;\n\nfunction parseEventData(eventData: any) {\n  try {\n    return typeof eventData === 'string' ? JSON.parse(eventData) : eventData;\n  } catch (e) {\n    return {};\n  }\n}\n"]}